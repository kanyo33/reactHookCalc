{"version":3,"sources":["components/NumberProvider.js","components/NegativeButton.js","components/NumberButton.js","components/FunctionButton.js","components/EqualButton.js","components/Display.js","components/ClearButton.js","components/BackButton.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["NumberContext","React","createContext","NumberProvider","props","_useState","useState","_useState2","Object","slicedToArray","number","setNumber","_useState3","_useState4","storedNumber","setStoredNumber","_useState5","_useState6","functionType","setFunctionType","handleSetStoredValue","react_default","a","createElement","Provider","value","doMath","concat","Math","round","parseFloat","handleBackButton","deletedNumber","slice","length","handleClearValue","handleSetCalcFunction","type","handleSetDisplayValue","num","includes","replace","handleToggleNegative","positiveNumber","children","NegativeButton","useContext","className","onClick","CalculatorButton","_ref","buttonValue","class","FunctionButton","EqualButton","Display","_useContext","ClearButton","BackButton","Calculator","components_Display","components_ClearButton","components_BackButton","components_FunctionButton","NumberButton","components_NegativeButton","components_EqualButton","App","components_NumberProvider","components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10f5dc7d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport const NumberContext = React.createContext();\r\n\r\nconst NumberProvider = props => {\r\n  const [number, setNumber] = useState('');\r\n  const [storedNumber, setStoredNumber] = useState('');\r\n  const [functionType, setFunctionType] = useState('');\r\n\r\n  const handleSetDisplayValue = num => {\r\n    if ((!number.includes('.') || num !== '.') && number.length < 8) {\r\n      setNumber(`${(number + num).replace(/^0+/, '')}`);\r\n    }\r\n  };\r\n\r\n  const handleSetStoredValue = () => {\r\n    setStoredNumber(number);\r\n    setNumber('');\r\n  };\r\n\r\n  const handleClearValue = () => {\r\n    setNumber('');\r\n    setStoredNumber('');\r\n    setFunctionType('');\r\n  };\r\n\r\n  const handleBackButton = () => {\r\n    if (number !== '') {\r\n      const deletedNumber = number.slice(0, number.length - 1);\r\n      setNumber(deletedNumber);\r\n    }\r\n  };\r\n\r\n  const handleSetCalcFunction = type => {\r\n    if (number) {\r\n      setFunctionType(type);\r\n      handleSetStoredValue();\r\n    }\r\n    if (storedNumber) {\r\n      setFunctionType(type);\r\n    }\r\n  };\r\n\r\n  const handleToggleNegative = () => {\r\n    if (number) {\r\n      if (number > 0) {\r\n        setNumber(`-${number}`);\r\n      } else {\r\n        const positiveNumber = number.slice(1);\r\n        setNumber(positiveNumber);\r\n      }\r\n    } else if (storedNumber > 0) {\r\n      setStoredNumber(`-${storedNumber}`);\r\n    } else {\r\n      const positiveNumber = storedNumber.slice(1);\r\n      setStoredNumber(positiveNumber);\r\n    }\r\n  };\r\n\r\n  const doMath = () => {\r\n    if (number && storedNumber) {\r\n      switch (functionType) {\r\n        case '+':\r\n          setStoredNumber(`${Math.round(`${(parseFloat(storedNumber) + parseFloat(number)) * 100}`) / 100}`);\r\n          break;\r\n        case '-':\r\n          setStoredNumber(`${Math.round(`${(parseFloat(storedNumber) - parseFloat(number)) * 1000}`) / 1000}`);\r\n          break;\r\n        case '/':\r\n          setStoredNumber(`${Math.round(`${(parseFloat(storedNumber) / parseFloat(number)) * 1000}`) / 1000}`);\r\n          break;\r\n        case '*':\r\n          setStoredNumber(`${Math.round(`${parseFloat(storedNumber) * parseFloat(number) * 1000}`) / 1000}`);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      setNumber('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NumberContext.Provider\r\n      value={{\r\n        doMath,\r\n        functionType,\r\n        handleBackButton,\r\n        handleClearValue,\r\n        handleSetCalcFunction,\r\n        handleSetDisplayValue,\r\n        handleSetStoredValue,\r\n        handleToggleNegative,\r\n        number,\r\n        storedNumber,\r\n        setNumber,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </NumberContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NumberProvider;\r\n","import React, {useContext} from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\n\r\nconst NegativeButton = () => {\r\n    const { handleToggleNegative } = useContext(NumberContext);\r\n    return (\r\n      <button className=\"box\" onClick={() => handleToggleNegative()}>\r\n        +/-\r\n      </button>\r\n    );\r\n  };\r\n\r\n  export default NegativeButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst CalculatorButton = ({ buttonValue }) => {\r\n  const { handleSetDisplayValue } = useContext(NumberContext);\r\n  return (\r\n    <button class=\"box\" onClick={() => handleSetDisplayValue(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CalculatorButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst FunctionButton = ({ buttonValue }) => {\r\n  const { handleSetCalcFunction } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"box spe\" onClick={() => handleSetCalcFunction(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FunctionButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst EqualButton = () => {\r\n  const { doMath } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"box equal\" onClick={() => doMath()}>\r\n      =\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default EqualButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst Display = () => {\r\n  const { number, storedNumber, functionType } = useContext(NumberContext);\r\n  return (\r\n      <div>\r\n        <p>\r\n            {!number.length && !storedNumber ? '0' : number || storedNumber}\r\n        </p>\r\n        <h5>\r\n            {!storedNumber ? '' : `${storedNumber} ${functionType} ${number}`}\r\n        </h5>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Display;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst ClearButton = () => {\r\n  const { handleClearValue } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"boxed spe\" onClick={() => handleClearValue()}>\r\n      C\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ClearButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst BackButton = () => {\r\n  const { handleBackButton } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"boxed spe\" onClick={() => handleBackButton()}>\r\n      &#8592;\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BackButton;","import React from 'react';\r\nimport NegativeButton from './NegativeButton';\r\nimport NumberButton from './NumberButton';\r\nimport FunctionButton from './FunctionButton';\r\nimport EqualButton from './EqualButton';\r\nimport Display from './Display';\r\nimport ClearButton from './ClearButton';\r\nimport BackButton from './BackButton';\r\n\r\n\r\nconst Calculator = () => (\r\n    <div className=\"container\">\r\n      <div className=\"ele_container\">\r\n           <Display/>\r\n        <div className=\"box_container\">\r\n          <ClearButton/>\r\n          <BackButton/>\r\n        <FunctionButton buttonValue=\"/\"/>\r\n        </div>\r\n        <div className=\"box_container\">\r\n            <NumberButton buttonValue={1}/>\r\n            <NumberButton buttonValue={2}/>\r\n            <NumberButton buttonValue={3}/>\r\n            <FunctionButton buttonValue=\"*\"/>\r\n        </div>\r\n        <div className=\"box_container\">\r\n            <NumberButton buttonValue={4}/>\r\n            <NumberButton buttonValue={5}/>\r\n            <NumberButton buttonValue={6}/>\r\n            <FunctionButton buttonValue=\"-\"/>\r\n        </div>\r\n        <div className=\"box_container\">\r\n            <NumberButton buttonValue={7}/>\r\n            <NumberButton buttonValue={8}/>\r\n            <NumberButton buttonValue={9}/>\r\n            <FunctionButton buttonValue=\"+\"/>\r\n        </div>\r\n        <div className=\"box_container\">\r\n            <NumberButton buttonValue=\".\"/>\r\n            <NumberButton buttonValue={0}/>\r\n            <NegativeButton/>\r\n            <EqualButton/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n\r\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport NumberProvider from './components/NumberProvider';\nimport Calculator from './components/Calculator';\n\n\nconst App = () => (\n    <NumberProvider>\n      <Calculator/>\n    </NumberProvider>\n  );\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}